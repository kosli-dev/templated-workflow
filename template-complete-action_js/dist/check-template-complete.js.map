{"version":3,"file":"check-template-complete.js","sources":["../../check-template-complete.ts"],"sourcesContent":["// src/checkAttestations.ts\nimport * as fs from \"fs\"; // Node.js built-in file system module\nimport * as path from \"path\"; // Node.js built-in path module (useful for path manipulation)\n\n// --- Type Definitions (Similar to Java Interfaces/Classes) ---\n// In TypeScript, we use interfaces to define the shape of data objects.\n// This provides strong typing and helps catch errors at compile time,\n// much like defining classes or interfaces in Java.\ninterface AttestationStatus {\n  attestation_name: string;\n  status: string;\n}\n\ninterface ComplianceStatus {\n  attestations_statuses?: AttestationStatus[]; // Optional array\n  artifacts_statuses?: {\n    // Optional object where keys are artifact names\n    [key: string]: {\n      // Index signature: allows arbitrary string keys\n      attestations_statuses: AttestationStatus[];\n    };\n  };\n}\n\ninterface KosliData {\n  compliance_status?: ComplianceStatus;\n}\n\n/**\n * Reads a JSON file, parses its content, and finds attestations\n * with a specified status.\n *\n * @param jsonFilePath - The path to the JSON file.\n * @param statusToFind - The status string to search for (e.g., \"MISSING\", \"COMPLETE\").\n * @returns An array of attestation names with the specified status.\n * @throws Error if the JSON file is not found or cannot be parsed.\n */\nexport function findAttestations(\n  jsonFilePath: string,\n  statusToFind: string,\n): string[] {\n  // --- Argument and File Existence Check (Bash: `if [ ! -f \"$json_file\" ]`) ---\n  // Instead of `exit 1` in bash, we throw an error in TypeScript.\n  // This is a more idiomatic way to handle errors in functions, allowing\n  // the caller to decide how to handle the exception.\n  if (!fs.existsSync(jsonFilePath)) {\n    throw new Error(`Error: JSON file '${jsonFilePath}' not found.`);\n  }\n\n  // --- Read and Parse JSON Data (Bash: `json_data=$(cat \"$json_file\")` then `jq`) ---\n  // `fs.readFileSync` reads the file content synchronously. For larger files\n  // or long-running applications, you'd typically use asynchronous `fs.promises.readFile`\n  // with `async/await` to avoid blocking the Node.js event loop.\n  // `JSON.parse` is the built-in JavaScript function to convert a JSON string into a JavaScript object.\n  const fileContent = fs.readFileSync(jsonFilePath, \"utf8\");\n  let data: KosliData;\n  try {\n    data = JSON.parse(fileContent);\n  } catch (error) {\n    throw new Error(\n      `Error parsing JSON file '${jsonFilePath}': ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n\n  // Add this check! If compliance_status is missing, we have nothing to process.\n  const complianceStatus = data.compliance_status;\n  if (!complianceStatus) {\n    return [];\n  }\n\n  const foundAttestations: string[] = [];\n\n  // Now, these checks are safe because complianceStatus is guaranteed to exist\n  // --- Process Direct Attestations (Bash: `jq_query_direct`) ---\n  // This is where functional programming shines.\n  // `?.` (optional chaining) safely accesses nested properties that might be undefined.\n  // `.filter()`: Creates a new array with all elements that pass the test implemented by the provided function.\n  // `.map()`: Creates a new array populated with the results of calling a provided function on every element in the calling array.\n  // This is very similar to Java's Stream API: `stream().filter(...).map(...).collect(...)`\n  if (complianceStatus.attestations_statuses) {\n    const directAttestations = complianceStatus.attestations_statuses\n      .filter((att) => att.status === statusToFind)\n      .map((att) => att.attestation_name);\n    foundAttestations.push(...directAttestations);\n  }\n\n  // --- Process Nested Attestations (Bash: `jq_query_nested`) ---\n  // `Object.values()`: Returns an array of a given object's own enumerable property values.\n  // `.flatMap()`: A combination of `map` and `flat`. It maps each element using a mapping function,\n  // then flattens the result into a new array. Perfect for handling nested arrays like `attestations_statuses`.\n  if (complianceStatus.artifacts_statuses) {\n    const nestedAttestations = Object.values(\n      complianceStatus.artifacts_statuses,\n    )\n      .flatMap((artifact) => artifact.attestations_statuses || [])\n      .filter((att) => att.status === statusToFind)\n      .map((att) => att.attestation_name);\n    foundAttestations.push(...nestedAttestations);\n  }\n\n  return foundAttestations;\n}\n\n// --- Main Execution Block (Bash: Top-level script logic) ---\n// `if (require.main === module)` is the Node.js equivalent of checking if a script\n// is being run directly (like `if __name__ == \"__main__\":` in Python).\n// `process.argv` is an array containing the command-line arguments.\n// `process.argv[0]` is 'node', `process.argv[1]` is the script path,\n// so actual arguments start from index 2.\nif (require.main === module) {\n  const args = process.argv.slice(2); // Get actual arguments\n\n  // --- Argument Count Check (Bash: `if [ \"$#\" -ne 2 ]`) ---\n  if (args.length !== 2) {\n    console.error(\n      \"Usage: ts-node src/checkAttestations.ts <json_file_path> <status_to_look_for>\",\n    );\n    console.error(\n      \"Example: ts-node src/checkAttestations.ts data.json MISSING\",\n    );\n    process.exit(1); // Exit with a non-zero code to indicate an error\n  }\n\n  const jsonFilePath = args[0];\n  const statusToFind = args[1];\n\n  try {\n    const foundAttestations = findAttestations(jsonFilePath, statusToFind);\n\n    // --- Output and Exit Status (Bash: `if [ ${#found_attestations[@]} -gt 0 ]`) ---\n    if (foundAttestations.length > 0) {\n      console.log(\n        `The following attestations have a '${statusToFind}' status:`,\n      );\n      foundAttestations.forEach((attestation) =>\n        console.log(`- ${attestation}`),\n      );\n      // Bash exits with 1 if found. Mimicking that behavior.\n      process.exit(1);\n    } else {\n      console.log(`No attestations found with '${statusToFind}' status.`);\n      process.exit(0); // Exit with 0 for success\n    }\n  } catch (error) {\n    // Catch any errors thrown by `findAttestations`\n    if (error instanceof Error) {\n      console.error(error.message);\n    } else {\n      console.error(\"An unknown error occurred.\");\n    }\n    process.exit(1);\n  }\n}\n"],"names":[],"mappings":"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"}